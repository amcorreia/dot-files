
export DOCKER_REPO_PREFIX=amcorreia

del_dangling_image(){
    docker rmi -f $(docker images -f "dangling=true" -q)
}

del_dangling_volume(){
    docker volume rm $(docker volume ls -qf dangling=true)
}

del_stopped(){
    local name=$1
    local state
    state=$(docker inspect --format "{{.State.Running}}" "$name" 2>/dev/null)

    if [[ "$state" == "false" ]]; then
        docker rm "$name"
    fi
}

relies_on(){
    for container in "$@"; do
        local state
        state=$(docker inspect --format "{{.State.Running}}" "$container" 2>/dev/null)

        if [[ "$state" == "false" ]] || [[ "$state" == "" ]]; then
            echo "$container is not running, starting it for you."
            $container
        fi
    done
}

weechat() {
    del_stopped weechat
    # relies_on notify_osd

    local args=$*
    if [[ "$1" == "tor" ]]; then
        relies_on torproxy

        map="MAP * ~NOTFOUND , EXCLUDE torproxy"
        proxy="socks5://torproxy:9050"
        args="--link torproxy:torproxy"
    fi

    docker run --rm -it \
        --volume /etc/localtime:/etc/localtime:ro \
        --volume "${HOME}/.weechat:/home/user/.weechat" \
        --read-only \
        $args \
        --name weechat \
        ${DOCKER_REPO_PREFIX}/docker-weechat
}

chrome(){
    # add flags for proxy if passed
    local proxy=
    local map
    local args=$*
    if [[ "$1" == "tor" ]]; then
        relies_on torproxy

        map="MAP * ~NOTFOUND , EXCLUDE torproxy"
        proxy="socks5://torproxy:9050"
        args="https://check.torproject.org/api/ip ${*:2}"
    fi

    del_stopped chrome
    # one day remove /etc/hosts bind mount when effing
    # overlay support inotify, such bullshit
    docker run -d \
        -v /etc/localtime:/etc/localtime:ro \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        -e "DISPLAY=unix${DISPLAY}" \
        -v "${HOME}/Downloads:/root/Downloads" \
        -v "${HOME}/Pictures:/root/Pictures" \
        -v "${HOME}/Torrents:/root/Torrents" \
        -v "${HOME}/.chrome:/data" \
        -v /dev/shm:/dev/shm \
        -v /etc/hosts:/etc/hosts \
        --name chrome \
        ${DOCKER_REPO_PREFIX}/chrome --user-data-dir=/data \
        --proxy-server="$proxy" \
        --host-resolver-rules="$map" "$args"

        #--memory 3gb \
        #--device /dev/video0 \
        #--device /dev/usb \
        #--device /dev/bus/usb \
        #--device /dev/snd \
        #--device /dev/dri \
        #--security-opt seccomp:/etc/docker/seccomp/chrome.json \
        #--group-add video \
}

wiki() {
    del_stopped wiki

    #docker run --rm -it \
    docker run --detach \
        --volume dokuwiki-data:/dokuwiki/data  \
        --volume dokuwiki-plugins:/dokuwiki/lib/plugins \
        --volume dokuwiki-conf:/dokuwiki/conf \
        --volume dokuwiki-tpl:/dokuwiki/lib/tpl \
        -e TZ=America/Sao_Paulo \
        --publish 80:80 \
        --name wiki \
        ${DOCKER_REPO_PREFIX}/docker-dokuwiki

}

python-docker() {
    docker run -it --rm              \
        --name my-running-script     \
        -v "$PWD":/usr/src/myapp     \
        -w /usr/src/myapp            \
        python:3.5                   \
        python ${1}
}

torproxy() {
    del_stopped torproxy

        #--restart always \
    docker run --detach --tty --rm \
        --publish 9050:9050 \
        --name torproxy \
        ${DOCKER_REPO_PREFIX}/docker-torproxy
}

teamviewer() {
    del_stopped teamviewer

    docker run --detach --tty --rm \
        -v /tmp/.X11-unix:/tmp/.X11-unix \
        --name teamviewer \
        ${DOCKER_REPO_PREFIX}/docker-teamviewer
}

hipchat() {
    del_stopped hipchat

    docker run --detach --tty --rm \
        --volume /tmp/.X11-unix:/tmp/.X11-unix \
        --device /dev/video0 \
        --device /dev/snd \
        --group-add audio \
        -e DISPLAY=unix$DISPLAY \
        --name hipchat \
        ${DOCKER_REPO_PREFIX}/docker-hipchat
}

mysql-workbench-raw() {
    del_stopped workbench

    # need option to pass '--link' and '--net'
    # if need connect in specific container, pass by param
    docker run --detach --tty --rm $* \
        --volume /tmp/.X11-unix:/tmp/.X11-unix \
        --volume $HOME/.mysql/:/root/.mysql \
        -e DISPLAY=unix$DISPLAY \
        --name workbench \
        ${DOCKER_REPO_PREFIX}/docker-mysql-workbench
}

mysql-workbench() {
    local container=$1
    local running_container_name=$(docker ps | grep $container | grep mariadb | awk '{print $11}')
    local container_network=$(docker network ls | grep $container | awk '{print $2}')

    mysql-workbench-raw --net $container_network --link $running_container_name:mariadb
}

dbschema() {

    docker run --detach --tty --rm \
        --volume /tmp/.X11-unix:/tmp/.X11-unix \
        -e DISPLAY=unix$DISPLAY \
        --name dbschema \
        ${DOCKER_REPO_PREFIX}/docker-dbschema
}

docker-emacs() {
    del_stopped emacs

    docker run --detach --tty --rm \
        --volume /tmp/.X11-unix:/tmp/.X11-unix \
        --volume $HOME:/home/user \
        --env DISPLAY=unix$DISPLAY \
        --name emacs \
        ${DOCKER_REPO_PREFIX}/docker-emacs:26.1
}

docker-slack() {
    del_stopped slack

    docker run --detach --tty --rm \
        --volume /tmp/.X11-unix:/tmp/.X11-unix \
        --volume $HOME:/home/user \
        --env DISPLAY=unix$DISPLAY \
        --device /dev/snd \
        --device /dev/dri \
        --group-add audio \
        --group-add video \
        --ipc="host" \
        --volume $HOME/.slack:/root/.config/Slack \
        --name slack \
        ${DOCKER_REPO_PREFIX}/docker-slack
}

docker-pgadmin() {

    del_stopped pgadmin

        #--link some-postgres:postgres \
    docker run --detach --tty --rm --name pgadmin \
        $* \
        -p 5050:5050 \
        fenglc/pgadmin4
}

docker-portainer() {

    docker run --detach  \
        -p 9000:9000 \
        --volume /var/run/docker.sock:/var/run/docker.sock \
        --volume portainer_data:/data \
        --name portainer \
        portainer/portainer
}
